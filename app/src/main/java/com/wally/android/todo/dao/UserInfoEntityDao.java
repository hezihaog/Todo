package com.wally.android.todo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wally.android.todo.entity.UserInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TODO_USER_INFO".
*/
public class UserInfoEntityDao extends AbstractDao<UserInfoEntity, Long> {

    public static final String TABLENAME = "TODO_USER_INFO";

    /**
     * Properties of entity UserInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RowId = new Property(0, Long.class, "rowId", true, "_id");
        public final static Property AccountName = new Property(1, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property Md5Pwd = new Property(3, String.class, "md5Pwd", false, "MD5_PWD");
        public final static Property CreateDate = new Property(4, Long.class, "createDate", false, "CREATE_DATE");
        public final static Property IsLogicDelete = new Property(5, int.class, "isLogicDelete", false, "IS_LOGIC_DELETE");
    }


    public UserInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TODO_USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: rowId
                "\"ACCOUNT_NAME\" TEXT," + // 1: accountName
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"MD5_PWD\" TEXT," + // 3: md5Pwd
                "\"CREATE_DATE\" INTEGER," + // 4: createDate
                "\"IS_LOGIC_DELETE\" INTEGER NOT NULL );"); // 5: isLogicDelete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TODO_USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        Long rowId = entity.getRowId();
        if (rowId != null) {
            stmt.bindLong(1, rowId);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(2, accountName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String md5Pwd = entity.getMd5Pwd();
        if (md5Pwd != null) {
            stmt.bindString(4, md5Pwd);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate);
        }
        stmt.bindLong(6, entity.getIsLogicDelete());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        Long rowId = entity.getRowId();
        if (rowId != null) {
            stmt.bindLong(1, rowId);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(2, accountName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String md5Pwd = entity.getMd5Pwd();
        if (md5Pwd != null) {
            stmt.bindString(4, md5Pwd);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate);
        }
        stmt.bindLong(6, entity.getIsLogicDelete());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoEntity readEntity(Cursor cursor, int offset) {
        UserInfoEntity entity = new UserInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // rowId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accountName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // md5Pwd
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // createDate
            cursor.getInt(offset + 5) // isLogicDelete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoEntity entity, int offset) {
        entity.setRowId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccountName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMd5Pwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIsLogicDelete(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoEntity entity, long rowId) {
        entity.setRowId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoEntity entity) {
        if(entity != null) {
            return entity.getRowId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoEntity entity) {
        return entity.getRowId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
